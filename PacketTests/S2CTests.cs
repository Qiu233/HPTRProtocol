namespace PacketTests;

public class S2CTests
{
	[TestedFor("1.4.3.6")]
	[Fact]
	public void DisconnectTest()
	{
		ServerSerializeTest(
			new Disconnect
			{
				Reason = new NetworkText("Misbehavior", NetworkText.Mode.Literal)
			}
			, new byte[] { 0x10, 0x00, 0x02, 0x00, 0x0B, 0x4D, 0x69, 0x73, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6F, 0x72 }
		);
	}
	[TestedFor("1.4.3.6")]
	[Fact]
	public void FrameSectionTest()
	{
		ServerSerializeTest(
			new FrameSection
			{
				Start = new(20, 40),
				End = new(40, 20)
			}
			, new byte[] { 0x0B, 0x00, 0x0B, 0x14, 0x00, 0x28, 0x00, 0x28, 0x00, 0x14, 0x00 }
		);
	}
	[TestedFor("1.4.3.6")]
	[Fact]
	public void LoadPlayerTest()
	{
		ServerSerializeTest(
			new LoadPlayer
			{
				PlayerSlot = 2,
				ServerWantsToRunCheckBytesInClientLoopThread = true
			}
			, new byte[] { 0x05, 0x00, 0x03, 0x02, 0x01 }
		);
	}
	[TestedFor("1.4.3.6")]
	[Fact]
	public void PlayerActiveTest()
	{
		ServerSerializeTest(
			new PlayerActive
			{
				PlayerSlot = 1,
				Active = true
			}
			, new byte[] { 0x05, 0x00, 0x0E, 0x01, 0x01 }
		);
	}
	[TestedFor("1.4.3.6")]
	[Fact]
	public void TileSectionTest()
	{
		ServerSerializeTest(
			new TileSection
			{
				Data = new()
				{
					IsCompressed = true,
					StartX = 0,
					StartY = 0,
					Width = 10,
					Height = 10,
					Tiles = new ComplexTileData[100],
					SignCount = 1,
					Signs = new SignData[] { new() { TileX = 0, TileY = 0, ID = 0, Text = "TestSign" } },
					ChestCount = 1,
					Chests = new ChestData[] { new() { TileX = 0, TileY = 0, ID = 0, Name = "TestChest" } },
					TileEntityCount = 8,
					TileEntities = new TileEntity[]
					{
						new TEDisplayDoll()
						{
							ID = 0,
							Position = new Position<short> { X = 0, Y = 0 }
						},
						new TEFoodPlatter()
						{
							ID = 1,
							Position = new Position<short> { X = 1, Y = 1 },
							Item = new()
							{
								ItemID = 757,
								Stack = 1
							}
						},
						new TEHatRack()
						{
							ID = 2,
							Position = new Position<short> { X = 2, Y = 2 },
							Items = new ItemData[]
							{
								new()
								{
									ItemID = 757,
									Stack = 1
								},
								new()
								{
									ItemID = 757,
									Stack = 1
								}
							},
							Dyes = new ItemData[]
							{
								new()
								{
									ItemID = 757,
									Stack = 1
								},
								new()
								{
									ItemID = 757,
									Stack = 1
								}
							}
						},
						new TEItemFrame()
						{
							ID = 3,
							Position = new Position<short> { X = 3, Y = 3 },
							Item = new()
								{
									ItemID = 757,
									Stack = 1
								}
						},
						new TELogicSensor()
						{
							ID = 4,
							Position = new Position<short> { X = 4, Y = 4 },
							LogicCheck = LogicCheckType.None,
							On = true
						},
						new TETeleportationPylon()
						{
							ID = 5,
							Position = new Position<short> { X = 5, Y = 5 },
						},
						new TETrainingDummy()
						{
							ID = 6,
							Position = new Position<short> { X = 6, Y = 6 },
							NPC = 1
						},
						new TEWeaponsRack()
						{
							ID = 7,
							Position = new Position<short> { X = 7, Y = 7 },
							Item = new()
								{
									ItemID = 757,
									Stack = 1
								}
						}
					}
				}
			}
			, new byte[] {
				0x5F, 0x00, 0x0A, 0x01, 0xBD, 0x8C, 0x4D, 0x12, 0x40, 0x30, 0x0C, 0x46,
				0x93, 0xB4, 0xD5, 0xB2, 0x71, 0x28, 0x47, 0xE0, 0x0A, 0x06, 0x1B, 0x1B,
				0xAE, 0x6E, 0xEF, 0xB5, 0x18, 0x33, 0x0E, 0x20, 0x6F, 0xE6, 0x4B, 0xBE,
				0xFC, 0x89, 0x5C, 0xD1, 0xC0, 0x1F, 0xA1, 0x77, 0xAE, 0x87, 0x71, 0xDB,
				0xBB, 0x19, 0x79, 0x3A, 0x29, 0x77, 0xFA, 0x65, 0x5A, 0x93, 0xB8, 0x77,
				0xBF, 0xCA, 0x63, 0x85, 0xC3, 0x90, 0x60, 0x38, 0x83, 0xB6, 0xD8, 0x8F,
				0x68, 0xBE, 0x73, 0x50, 0x9C, 0x79, 0x9C, 0x07, 0xD1, 0x18, 0x28, 0x03,
				0x48, 0x95, 0x5F, 0x82, 0x8A, 0x8F, 0x94, 0x11, 0xCA, 0xF2, 0x09 }
		);
	}


	[TestedFor("1.4.3.6")]
	[Fact]
	public void WorldDataTest()
	{
		ServerSerializeTest(
			new WorldData
			{
				Time = 20,
				DayAndMoonInfo = 0,
				MoonPhase = 1,
				MaxTileX = 500,
				MaxTileY = 500,
				SpawnX = 20,
				SpawnY = 20,
				WorldSurface = 100,
				RockLayer = 400,
				WorldID = 20,
				WorldName = "TestWorldName",
				GameMode = 1,
				WorldUniqueID = new Guid("BBD90168-C890-47FF-8B83-7E2464FC59D6"),
				WorldGeneratorVersion = 60,
				MoonType = 2,
			}
			, new byte[] {
				0xAA, 0x00, 0x07, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF4, 0x01, 0xF4,
				0x01, 0x14, 0x00, 0x14, 0x00, 0x64, 0x00, 0x90, 0x01, 0x14, 0x00, 0x00,
				0x00, 0x0D, 0x54, 0x65, 0x73, 0x74, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x4E,
				0x61, 0x6D, 0x65, 0x01, 0x68, 0x01, 0xD9, 0xBB, 0x90, 0xC8, 0xFF, 0x47,
				0x8B, 0x83, 0x7E, 0x24, 0x64, 0xFC, 0x59, 0xD6, 0x3C, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00 }
		);
	}

	[TestedFor("1.4.3.6")]
	[Fact]
	public void RemoveItemOwnerTest()
	{
		ServerSerializeTest(
			new RemoveItemOwner
			{
				ItemSlot = 30
			}
			, new byte[] { 0x05, 0x00, 0x27, 0x1E, 0x00 }
		);
	}

	[TestedFor("1.4.3.6")]
	[Fact]
	public void SendNPCBuffsTest()
	{
		var packet = new SendNPCBuffs
		{
			NPCSlot = 16
		};
		packet.Buffs[2] = new() { Type = 60, Time = 3600 };
		ServerSerializeTest(packet
			, new byte[] {
				0x19, 0x00, 0x36, 0x10, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x10,
				0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
		);
	}

	[TestedFor("1.4.3.6")]
	[Fact]
	public void StatusTextTest()
	{
		ServerSerializeTest(
			new StatusText
			{
				Max = 20,
				Text = new NetworkText("ABC123", NetworkText.Mode.Literal),
				Flags = 20
			}
			, new byte[] { 0x10, 0x00, 0x09, 0x14, 0x00, 0x00, 0x00, 0x00, 0x06, 0x41, 0x42, 0x43, 0x31, 0x32, 0x33, 0x14 }
		);
	}

	[TestedFor("1.4.3.6")]
	[Fact]
	public void UpdateGoodEvilTest()
	{
		ServerSerializeTest(
			new UpdateGoodEvil
			{
				Good = 20,
				Evil = 40,
				Blood = 60
			}
			, new byte[] { 0x06, 0x00, 0x39, 0x14, 0x28, 0x3C }
		);
	}

	[TestedFor("1.4.3.6")]
	[Fact]
	public void UpdateTimeTest()
	{
		ServerSerializeTest(
			new UpdateTime
			{
				DayTime = true,
				Moon = 20,
				Sun = 20,
				Time = 3600
			}
			, new byte[] { 0x0C, 0x00, 0x12, 0x01, 0x10, 0x0E, 0x00, 0x00, 0x14, 0x00, 0x14, 0x00 }
		);
	}

	[TestedFor("1.4.3.6")]
	[Fact]
	public void AnglerQuestTest()
	{
		ServerSerializeTest(
			new AnglerQuest
			{
				QuestType = 9,
				Finished = true
			}
			, new byte[] { 0x05, 0x00, 0x4A, 0x09, 0x01 }
		);
	}
	[TestedFor("1.4.3.6")]
	[Fact]
	public void CreateCombatTextTest()
	{
		ServerSerializeTest(
			new CreateCombatText
			{
				Position = new(2400, 25000),
				Color = new(50, 60, 60),
				Amount = 50
			}
			, new byte[] { 0x12, 0x00, 0x51, 0x00, 0x00, 0x16, 0x45, 0x00, 0x50, 0xC3, 0x46, 0x32, 0x3C, 0x3C, 0x32, 0x00, 0x00, 0x00 }
		);
	}
	[TestedFor("1.4.3.6")]
	[Fact]
	public void InvasionProgressReportTest()
	{
		ServerSerializeTest(
			new InvasionProgressReport
			{
				Icon = 60,
				Progress = 50,
				ProgressMax = 100,
				Wave = 8
			}
			, new byte[] { 0x0D, 0x00, 0x4E, 0x32, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x3C, 0x08 }
		);
	}
	[TestedFor("1.4.3.6")]
	[Fact]
	public void TemporaryAnimationTest()
	{
		ServerSerializeTest(
			new TemporaryAnimation
			{
				Position = new(10000, 25000),
				AnimationType = 60,
				TileType = 20,
			}
			, new byte[] { 0x0B, 0x00, 0x4D, 0x3C, 0x00, 0x14, 0x00, 0x10, 0x27, 0xA8, 0x61 }
		);
	}
	[TestedFor("1.4.3.6")]
	[Fact]
	public void TravelMerchantItemsTest()
	{
		var packet = new TravelMerchantItems();
		packet.ShopItems[5] = 60;
		ServerSerializeTest(packet
			, new byte[] {
				0x53, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
		);
	}
}